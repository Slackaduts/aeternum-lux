
// all shader uniforms used by Post-Processing FX
global.__ppf_shader_uniforms = {
	downsample_box4_res : shader_get_uniform(__PPF_SH_DS_BOX4, "resolution"),
	downsample_box4_reduce_banding : shader_get_uniform(__PPF_SH_DS_BOX4, "reduce_banding"),
	downsample_box13_res : shader_get_uniform(__PPF_SH_DS_BOX13, "resolution"),
	downsample_box13_reduce_banding : shader_get_uniform(__PPF_SH_DS_BOX13, "reduce_banding"),
	upsample_tent_res : shader_get_uniform(__PPF_SH_US_TENT9, "resolution"),
	upsample_tent_reduce_banding : shader_get_uniform(__PPF_SH_US_TENT9, "reduce_banding"),
	gnmask_power : shader_get_uniform(__PPF_SH_GNMSK, "mask_power"),
	gnmask_scale : shader_get_uniform(__PPF_SH_GNMSK, "mask_scale"),
	gnmask_smoothness : shader_get_uniform(__PPF_SH_GNMSK, "mask_smoothness"),
	gnmask_texture : shader_get_sampler_index(__PPF_SH_GNMSK, "mask_tex"),
	mask_render_posres : shader_get_uniform(__PPF_SH_SPRMSK, "render_pos_res"),
	mask_render_tex : shader_get_sampler_index(__PPF_SH_SPRMSK, "render_tex"),
	
	base_main : {
		pos_res : shader_get_uniform(__PPF_SH_BASE, "pos_res"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_BASE, "u_time_n_intensity"),
		enabledd : shader_get_uniform(__PPF_SH_BASE, "u_enabled"),
	},
	color_grading : {
		pos_res : shader_get_uniform(__PPF_SH_COLOR_GRADING, "pos_res"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_time_n_intensity"),
		enabledd : shader_get_uniform(__PPF_SH_COLOR_GRADING, "u_enabled"),
	},
	base_final : {
		pos_res : shader_get_uniform(__PPF_SH_FINAL, "pos_res"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_FINAL, "u_time_n_intensity"),
		enabledd : shader_get_uniform(__PPF_SH_FINAL, "u_enabled"),
	},
	
	rotation : {
		angle : shader_get_uniform(__PPF_SH_BASE, "rotation_angle"),
	},
	zoom : {
		amount : shader_get_uniform(__PPF_SH_BASE, "zoom_amount"),
		center : shader_get_uniform(__PPF_SH_BASE, "zoom_center"),
	},
	shake : {
		speedd : shader_get_uniform(__PPF_SH_BASE, "shake_speed"),
		magnitude : shader_get_uniform(__PPF_SH_BASE, "shake_magnitude"),
		hspeedd : shader_get_uniform(__PPF_SH_BASE, "shake_hspeed"),
		vspeedd : shader_get_uniform(__PPF_SH_BASE, "shake_vspeed"),
	},
	lens_distortion : {
		amount : shader_get_uniform(__PPF_SH_BASE, "lens_distortion_amount"),
		amount_f : shader_get_uniform(__PPF_SH_FINAL, "lens_distortion_amount"),
		amount_c : shader_get_uniform(__PPF_SH_COLOR_GRADING, "lens_distortion_amount"),
		amount_d : shader_get_uniform(__PPF_SH_DOF_COC, "lens_distortion_amount"),
	},
	pixelize : {
		amount : shader_get_uniform(__PPF_SH_BASE, "pixelize_amount"),
		squares_max : shader_get_uniform(__PPF_SH_BASE, "pixelize_squares_max"),
		steps : shader_get_uniform(__PPF_SH_BASE, "pixelize_steps"),
	},
	swirl : {
		angle : shader_get_uniform(__PPF_SH_BASE, "swirl_angle"),
		radius : shader_get_uniform(__PPF_SH_BASE, "swirl_radius"),
		center : shader_get_uniform(__PPF_SH_BASE, "swirl_center"),
	},
	panorama : {
		depthh : shader_get_uniform(__PPF_SH_BASE, "panorama_depth"),
		is_horizontal : shader_get_uniform(__PPF_SH_BASE, "panorama_is_horizontal"),
	},
	sine_wave : {
		frequency : shader_get_uniform(__PPF_SH_BASE, "sinewave_frequency"),
		amplitude : shader_get_uniform(__PPF_SH_BASE, "sinewave_amplitude"),
		speedd : shader_get_uniform(__PPF_SH_BASE, "sinewave_speed"),
		offset : shader_get_uniform(__PPF_SH_BASE, "sinewave_offset"),
	},
	glitch : {
		speedd : shader_get_uniform(__PPF_SH_BASE, "glitch_speed"),
		block_size : shader_get_uniform(__PPF_SH_BASE, "glitch_block_size"),
		interval : shader_get_uniform(__PPF_SH_BASE, "glitch_interval"),
		intensity : shader_get_uniform(__PPF_SH_BASE, "glitch_intensity"),
		peak_amplitude1 : shader_get_uniform(__PPF_SH_BASE, "glitch_peak_amplitude1"),
		peak_amplitude2 : shader_get_uniform(__PPF_SH_BASE, "glitch_peak_amplitude2"),
	},
	displacemap : {
		amount : shader_get_uniform(__PPF_SH_BASE, "displacemap_amount"),
		zoom : shader_get_uniform(__PPF_SH_BASE, "displacemap_zoom"),
		angle : shader_get_uniform(__PPF_SH_BASE, "displacemap_angle"),
		speedd : shader_get_uniform(__PPF_SH_BASE, "displacemap_speed"),
		texture : shader_get_sampler_index(__PPF_SH_BASE, "displacemap_tex"),
		offset : shader_get_uniform(__PPF_SH_BASE, "displacemap_offset"),
	},
	shockwaves : {
		amount : shader_get_uniform(__PPF_SH_BASE, "shockwaves_amount"),
		aberration : shader_get_uniform(__PPF_SH_BASE, "shockwaves_aberration"),
		texture : shader_get_sampler_index(__PPF_SH_BASE, "shockwaves_tex"),
		prisma_lut_tex : shader_get_sampler_index(__PPF_SH_BASE, "shockwaves_prisma_lut_tex"),
	},
	white_balance : {
		temperature : shader_get_uniform(__PPF_SH_BASE, "white_balance_temperature"),
		tint : shader_get_uniform(__PPF_SH_BASE, "white_balance_tint"),
	},
	fxaa : {
		resolution : shader_get_uniform(__PPF_SH_FXAA, "resolution"),
		strength : shader_get_uniform(__PPF_SH_FXAA, "fxaa_strength"),
	},
	sunshafts : {
		base_res : shader_get_uniform(__PPF_SH_SUNSHAFTS, "base_res"),
		base_tex : shader_get_sampler_index(__PPF_SH_SUNSHAFTS, "base_tex"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_SUNSHAFTS, "u_time_n_intensity"),
		position : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_position"),
		center_smoothness : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_center_smoothness"),
		threshold : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_threshold"),
		intensity : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_intensity"),
		dimmer : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_dimmer"),
		scattering : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_scattering"),
		noise_enable : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_noise_enable"),
		rays_tiling : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_rays_tiling"),
		rays_speed : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_rays_speed"),
		dual_textures : shader_get_uniform(__PPF_SH_SUNSHAFTS, "sunshaft_dual_textures"),
		world_tex : shader_get_sampler_index(__PPF_SH_SUNSHAFTS, "sunshaft_world_tex"),
		sky_tex : shader_get_sampler_index(__PPF_SH_SUNSHAFTS, "sunshaft_sky_tex"),
		noise_tex : shader_get_sampler_index(__PPF_SH_SUNSHAFTS, "sunshaft_noise_tex"),
	},
	bloom : {
		pre_filter_res : shader_get_uniform(__PPF_SH_BLOOM_PRE_FILTER, "resolution"),
		pre_filter_threshold : shader_get_uniform(__PPF_SH_BLOOM_PRE_FILTER, "bloom_threshold"),
		pre_filter_intensity : shader_get_uniform(__PPF_SH_BLOOM_PRE_FILTER, "bloom_intensity"),
		resolution : shader_get_uniform(__PPF_SH_BLOOM, "resolution"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_BLOOM, "u_time_n_intensity"),
		threshold : shader_get_uniform(__PPF_SH_BLOOM, "bloom_threshold"),
		intensity : shader_get_uniform(__PPF_SH_BLOOM, "bloom_intensity"),
		colorr : shader_get_uniform(__PPF_SH_BLOOM, "bloom_color"),
		dirt_enable : shader_get_uniform(__PPF_SH_BLOOM, "bloom_dirt_enable"),
		dirt_intensity : shader_get_uniform(__PPF_SH_BLOOM, "bloom_dirt_intensity"),
		dirt_scale : shader_get_uniform(__PPF_SH_BLOOM, "bloom_dirt_scale"),
		dirt_tex : shader_get_sampler_index(__PPF_SH_BLOOM, "bloom_dirt_tex"),
		bloom_tex : shader_get_sampler_index(__PPF_SH_BLOOM, "bloom_tex"),
		debug : shader_get_uniform(__PPF_SH_BLOOM, "bloom_debug"),
	},
	depth_of_field : {
		coc_bokeh_radius : shader_get_uniform(__PPF_SH_DOF_COC, "bokeh_radius"),
		coc_focus_distance : shader_get_uniform(__PPF_SH_DOF_COC, "focus_distance"),
		coc_focus_range : shader_get_uniform(__PPF_SH_DOF_COC, "focus_range"),
		coc_use_zdepth : shader_get_uniform(__PPF_SH_DOF_COC, "use_zdepth"),
		coc_zdepth_tex : shader_get_sampler_index(__PPF_SH_DOF_COC, "zdepth_tex"),
		_coc_lens_distortion_enable : shader_get_uniform(__PPF_SH_DOF_COC, "lens_distortion_enable"),
		
		bokeh_resolution : shader_get_uniform(__PPF_SH_DOF_BOKEH, "resolution"),
		bokeh_time_n_intensity : shader_get_uniform(__PPF_SH_DOF_BOKEH, "u_time_n_intensity"),
		bokeh_radius : shader_get_uniform(__PPF_SH_DOF_BOKEH, "bokeh_radius"),
		bokeh_intensity : shader_get_uniform(__PPF_SH_DOF_BOKEH, "bokeh_intensity"),
		bokeh_shaped : shader_get_uniform(__PPF_SH_DOF_BOKEH, "bokeh_shaped"),
		bokeh_blades_aperture : shader_get_uniform(__PPF_SH_DOF_BOKEH, "bokeh_blades_aperture"),
		bokeh_blades_angle : shader_get_uniform(__PPF_SH_DOF_BOKEH, "bokeh_blades_angle"),
		bokeh_debug : shader_get_uniform(__PPF_SH_DOF_BOKEH, "dof_debug"),
		bokeh_coc_tex : shader_get_sampler_index(__PPF_SH_DOF_BOKEH, "coc_tex"),
		
		final_coc_tex : shader_get_sampler_index(__PPF_SH_DOF, "coc_tex"),
		final_dof_tex : shader_get_sampler_index(__PPF_SH_DOF, "dof_tex"),
	},
	motion_blur : {
		angle : shader_get_uniform(__PPF_SH_MOTION_BLUR, "motion_blur_direction"),
		radius : shader_get_uniform(__PPF_SH_MOTION_BLUR, "motion_blur_radius"),
		center : shader_get_uniform(__PPF_SH_MOTION_BLUR, "motion_blur_center"),
		mask_power : shader_get_uniform(__PPF_SH_MOTION_BLUR, "motion_blur_mask_power"),
		mask_scale : shader_get_uniform(__PPF_SH_MOTION_BLUR, "motion_blur_mask_scale"),
		mask_smoothness : shader_get_uniform(__PPF_SH_MOTION_BLUR, "motion_blur_mask_smoothness"),
		overlay_texture : shader_get_sampler_index(__PPF_SH_MOTION_BLUR, "motion_blur_overlay_tex"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_MOTION_BLUR, "u_time_n_intensity"),
	},
	blur_radial : {
		u_time_n_intensity : shader_get_uniform(__PPF_SH_RADIAL_BLUR, "u_time_n_intensity"),
		radius : shader_get_uniform(__PPF_SH_RADIAL_BLUR, "radial_blur_radius"),
		center : shader_get_uniform(__PPF_SH_RADIAL_BLUR, "radial_blur_center"),
		inner : shader_get_uniform(__PPF_SH_RADIAL_BLUR, "radial_blur_inner"),
	},
	lut3d : {
		intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "lut3d_intensity"),
		size : shader_get_uniform(__PPF_SH_COLOR_GRADING, "lut3d_size"),
		squares : shader_get_uniform(__PPF_SH_COLOR_GRADING, "lut3d_squares"),
		tex_lookup : shader_get_sampler_index(__PPF_SH_COLOR_GRADING, "lut3d_tex"),
	},
	shadow_midtone_highlight : {
		shadow_color : shader_get_uniform(__PPF_SH_COLOR_GRADING, "shadow_color"),
		midtone_color : shader_get_uniform(__PPF_SH_COLOR_GRADING, "midtone_color"),
		highlight_color : shader_get_uniform(__PPF_SH_COLOR_GRADING, "highlight_color"),
		shadow_range : shader_get_uniform(__PPF_SH_COLOR_GRADING, "shadow_range"),
		highlight_range : shader_get_uniform(__PPF_SH_COLOR_GRADING, "highlight_range"),
	},
	exposure : {
		value : shader_get_uniform(__PPF_SH_COLOR_GRADING, "exposure"),
	},
	posterization : {
		color_factor : shader_get_uniform(__PPF_SH_COLOR_GRADING, "posterization_col_factor"),
	},
	brightness : {
		value : shader_get_uniform(__PPF_SH_COLOR_GRADING, "brightness"),
	},
	saturation : {
		value : shader_get_uniform(__PPF_SH_COLOR_GRADING, "saturation"),
	},
	contrast : {
		value : shader_get_uniform(__PPF_SH_COLOR_GRADING, "contrast"),
	},
	tone_mapping : {
		mode : shader_get_uniform(__PPF_SH_COLOR_GRADING, "tone_mapping_mode"),
	},
	lift_gamma_gain : {
		lift : shader_get_uniform(__PPF_SH_COLOR_GRADING, "lift_rgb"),
		gamma : shader_get_uniform(__PPF_SH_COLOR_GRADING, "gamma_rgb"),
		gain : shader_get_uniform(__PPF_SH_COLOR_GRADING, "gain_rgb"),
	},
	hue_shift : {
		colorr : shader_get_uniform(__PPF_SH_COLOR_GRADING, "hue_shift"),
	},
	colorize : {
		colorr : shader_get_uniform(__PPF_SH_COLOR_GRADING, "colorize_color"),
		intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "colorize_intesity"),
		darkness : shader_get_uniform(__PPF_SH_COLOR_GRADING, "colorize_darkness"),
	},
	invert_colors : {
		intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "invert_colors_intensity"),
	},
	texture_overlay : {
		intensity : shader_get_uniform(__PPF_SH_COLOR_GRADING, "texture_overlay_intensity"),
		texture : shader_get_sampler_index(__PPF_SH_COLOR_GRADING, "texture_overlay_tex"),
		zoom : shader_get_uniform(__PPF_SH_COLOR_GRADING, "texture_overlay_zoom"),
	},
	palette_swap : {
		u_time_n_intensity : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "u_time_n_intensity"),
		row : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "palette_swap_row"),
		pal_height : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "palette_swap_height"),
		threshold : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "palette_swap_threshold"),
		flip : shader_get_uniform(__PPF_SH_PALETTE_SWAP, "palette_swap_flip"),
		texture : shader_get_sampler_index(__PPF_SH_PALETTE_SWAP, "palette_swap_tex"),
	},
	blur_kawase : {
		u_time_n_intensity : shader_get_uniform(__PPF_SH_KAWASE_BLUR, "u_time_n_intensity"),
		mask_power : shader_get_uniform(__PPF_SH_KAWASE_BLUR, "kawase_blur_mask_power"),
		mask_scale : shader_get_uniform(__PPF_SH_KAWASE_BLUR, "kawase_blur_mask_scale"),
		mask_smoothness : shader_get_uniform(__PPF_SH_KAWASE_BLUR, "kawase_blur_mask_smoothness"),
		blur_tex : shader_get_sampler_index(__PPF_SH_KAWASE_BLUR, "kawase_blur_tex"),
	},
	blur_gaussian : {
		resolution : shader_get_uniform(__PPF_SH_GAUSSIAN_BLUR, "resolution"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_GAUSSIAN_BLUR, "u_time_n_intensity"),
		amount : shader_get_uniform(__PPF_SH_GAUSSIAN_BLUR, "gaussian_blur_amount"),
		mask_power : shader_get_uniform(__PPF_SH_GAUSSIAN_BLUR, "gaussian_blur_mask_power"),
		mask_scale : shader_get_uniform(__PPF_SH_GAUSSIAN_BLUR, "gaussian_blur_mask_scale"),
		mask_smoothness : shader_get_uniform(__PPF_SH_GAUSSIAN_BLUR, "gaussian_blur_mask_smoothness"),
	},
	chromaber : {
		pos_res : shader_get_uniform(__PPF_SH_CHROMABER, "pos_res"),
		u_time_n_intensity : shader_get_uniform(__PPF_SH_CHROMABER, "u_time_n_intensity"),
		angle : shader_get_uniform(__PPF_SH_CHROMABER, "chromaber_direction"),
		intensity : shader_get_uniform(__PPF_SH_CHROMABER, "chromaber_intensity"),
		only_outer : shader_get_uniform(__PPF_SH_CHROMABER, "chromaber_only_outer"),
		center_radius : shader_get_uniform(__PPF_SH_CHROMABER, "chromaber_center_radius"),
		blur_enable : shader_get_uniform(__PPF_SH_CHROMABER, "chromaber_blur_enable"),
		prisma_lut_tex : shader_get_sampler_index(__PPF_SH_CHROMABER, "chromaber_prisma_lut"),
	},
	dithering : {
		bayer_texture : shader_get_sampler_index(__PPF_SH_FINAL, "dither_bayer_tex"),
		threshold : shader_get_uniform(__PPF_SH_FINAL, "dither_threshold"),
		strength : shader_get_uniform(__PPF_SH_FINAL, "dither_strength"),
		mode : shader_get_uniform(__PPF_SH_FINAL, "dither_mode"),
		coord_absolute : shader_get_uniform(__PPF_SH_FINAL, "dither_coord_absolute"),
		bayer_size : shader_get_uniform(__PPF_SH_FINAL, "dither_bayer_size"),
	},
	noise_grain : {
		intensity : shader_get_uniform(__PPF_SH_FINAL, "noise_grain_intensity"),
		scale : shader_get_uniform(__PPF_SH_FINAL, "noise_grain_scale"),
		mix : shader_get_uniform(__PPF_SH_FINAL, "noise_grain_mix"),
		noise_tex : shader_get_sampler_index(__PPF_SH_FINAL, "noise_grain_tex"),
	},
	mist : {
		intensity : shader_get_uniform(__PPF_SH_FINAL, "mist_intensity"),
		scale : shader_get_uniform(__PPF_SH_FINAL, "mist_scale"),
		tiling : shader_get_uniform(__PPF_SH_FINAL, "mist_tiling"),
		speedd : shader_get_uniform(__PPF_SH_FINAL, "mist_speed"),
		angle : shader_get_uniform(__PPF_SH_FINAL, "mist_angle"),
		contrast : shader_get_uniform(__PPF_SH_FINAL, "mist_contrast"),
		powerr : shader_get_uniform(__PPF_SH_FINAL, "mist_power"),
		remap : shader_get_uniform(__PPF_SH_FINAL, "mist_remap"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "mist_color"),
		mix : shader_get_uniform(__PPF_SH_FINAL, "mist_mix"),
		mix_threshold : shader_get_uniform(__PPF_SH_FINAL, "mist_mix_threshold"),
		noise_tex : shader_get_sampler_index(__PPF_SH_FINAL, "mist_noise_tex"),
		offset : shader_get_uniform(__PPF_SH_FINAL, "mist_offset"),
		fade_amount : shader_get_uniform(__PPF_SH_FINAL, "mist_fade_amount"),
		fade_angle : shader_get_uniform(__PPF_SH_FINAL, "mist_fade_angle"),
	},
	speedlines : {
		scale : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_scale"),
		tiling : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_tiling"),
		speedd : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_speed"),
		rot_speed : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_rot_speed"),
		contrast : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_contrast"),
		powerr : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_power"),
		remap : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_remap"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_color"),
		mask_power : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_mask_power"),
		mask_scale : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_mask_scale"),
		mask_smoothness : shader_get_uniform(__PPF_SH_FINAL, "speed_lines_mask_smoothness"),
		noise_tex : shader_get_sampler_index(__PPF_SH_FINAL, "speed_lines_noise_tex"),
	},
	vignette : {
		intensity : shader_get_uniform(__PPF_SH_FINAL, "vignette_intensity"),
		curvature : shader_get_uniform(__PPF_SH_FINAL, "vignette_curvature"),
		inner : shader_get_uniform(__PPF_SH_FINAL, "vignette_inner"),
		outer : shader_get_uniform(__PPF_SH_FINAL, "vignette_outer"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "vignette_color"),
		center : shader_get_uniform(__PPF_SH_FINAL, "vignette_center"),
		rounded : shader_get_uniform(__PPF_SH_FINAL, "vignette_rounded"),
		linear : shader_get_uniform(__PPF_SH_FINAL, "vignette_linear"),
	},
	nes_fade : {
		amount : shader_get_uniform(__PPF_SH_FINAL, "nes_fade_amount"),
		levels : shader_get_uniform(__PPF_SH_FINAL, "nes_fade_levels"),
	},
	scanlines : {
		intensity : shader_get_uniform(__PPF_SH_FINAL, "scanlines_intensity"),
		speedd : shader_get_uniform(__PPF_SH_FINAL, "scanlines_speed"),
		amount : shader_get_uniform(__PPF_SH_FINAL, "scanlines_amount"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "scanlines_color"),
		mask_power : shader_get_uniform(__PPF_SH_FINAL, "scanlines_mask_power"),
		mask_scale : shader_get_uniform(__PPF_SH_FINAL, "scanlines_mask_scale"),
		mask_smoothness : shader_get_uniform(__PPF_SH_FINAL, "scanlines_mask_smoothness"),
	},
	fade : {
		amount : shader_get_uniform(__PPF_SH_FINAL, "fade_amount"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "fade_color"),
	},
	cinema_bars : {
		amount : shader_get_uniform(__PPF_SH_FINAL, "cinema_bars_amount"),
		colorr : shader_get_uniform(__PPF_SH_FINAL, "cinema_bars_color"),
		vertical_enable : shader_get_uniform(__PPF_SH_FINAL, "cinema_bars_vertical_enable"),
		horizontal_enable : shader_get_uniform(__PPF_SH_FINAL, "cinema_bars_horizontal_enable"),
		is_fixed : shader_get_uniform(__PPF_SH_FINAL, "cinema_bars_is_fixed"),
	},
	color_blindness : {
		mode : shader_get_uniform(__PPF_SH_FINAL, "color_blindness_mode"),
	},
	channels : {
		rgb : shader_get_uniform(__PPF_SH_FINAL, "channel_rgb"),
	},
	border : {
		curvature_f : shader_get_uniform(__PPF_SH_FINAL, "border_curvature"),
		smooth_f : shader_get_uniform(__PPF_SH_FINAL, "border_smooth"),
		colorr_f : shader_get_uniform(__PPF_SH_FINAL, "border_color"),
		curvature_c : shader_get_uniform(__PPF_SH_COLOR_GRADING, "border_curvature"),
		smooth_c : shader_get_uniform(__PPF_SH_COLOR_GRADING, "border_smooth"),
		colorr_c : shader_get_uniform(__PPF_SH_COLOR_GRADING, "border_color"),
	},
}


// all textures used by Post-Processing FX
global.__ppf_shader_textures = {
	pixel_texture : sprite_get_texture(__spr_ppf_pixel, 0),
	empty_texture : sprite_get_texture(__spr_ppf_empty, 0),
	noise_point : sprite_get_texture(__spr_ppf_noise_point, 0),
	noise_perlin : sprite_get_texture(__spr_ppf_noise_perlin, 0),
	noise_simplex : sprite_get_texture(__spr_ppf_noise_simplex, 0),
	default_normal : sprite_get_texture(__spr_ppf_normal, 0),
	default_palette : sprite_get_texture(__spr_ppf_pal_default, 0),
	default_lut3d : sprite_get_texture(__spr_ppf_lut3d_default, 0),
	default_dirt_lens : sprite_get_texture(__spr_ppf_dirt_lens, 0),
	default_overlay_tex : sprite_get_texture(__spr_ppf_blood, 0),
	default_chromaber_prisma_lut : sprite_get_texture(__spr_ppf_prism_lut_rb, 0),
	default_shockwaves_prisma_lut : sprite_get_texture(__spr_ppf_prism_lut_sw, 0),
	bayer_16x16 : sprite_get_texture(__spr_ppf_bayer16x16, 0),
	bayer_8x8 : sprite_get_texture(__spr_ppf_bayer8x8, 0),
	bayer_4x4 : sprite_get_texture(__spr_ppf_bayer4x4, 0),
	bayer_2x2 : sprite_get_texture(__spr_ppf_bayer2x2, 0),
}

#macro __PPF_SU global.__ppf_shader_uniforms
#macro __PPF_ST global.__ppf_shader_textures
